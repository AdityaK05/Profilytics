version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: profilytics-db
    environment:
      POSTGRES_USER: profilytics_user
      POSTGRES_PASSWORD: profilytics_password
      POSTGRES_DB: profilytics
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U profilytics_user -d profilytics"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - profilytics-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: profilytics-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - profilytics-network

  # Backend API server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: profilytics-backend
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DATABASE_URL=postgresql://profilytics_user:profilytics_password@postgres:5432/profilytics
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-here
      - OPENAI_API_KEY=your-openai-api-key-here
      - FRONTEND_URL=http://frontend:3000
      - FRONTEND_URLS=http://localhost:3000,http://frontend:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
    networks:
      - profilytics-network

  # Frontend Next.js application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: profilytics-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:5000/api
      - NEXT_PUBLIC_SOCKET_URL=http://localhost:5000
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
    depends_on:
      - backend
    networks:
      - profilytics-network

networks:
  profilytics-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  backend_logs:
  backend_uploads: